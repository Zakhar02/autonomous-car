"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class init_state(object):
    __slots__ = ["xi", "yi", "xf", "yf", "thetai", "thetaf", "l", "k", "planning"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "boolean"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.xi = 0.0
        self.yi = 0.0
        self.xf = 0.0
        self.yf = 0.0
        self.thetai = 0.0
        self.thetaf = 0.0
        self.l = 0.0
        self.k = 0.0
        self.planning = False

    def encode(self):
        buf = BytesIO()
        buf.write(init_state._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddddddddb", self.xi, self.yi, self.xf, self.yf, self.thetai, self.thetaf, self.l, self.k, self.planning))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != init_state._get_packed_fingerprint():
            raise ValueError("Decode error")
        return init_state._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = init_state()
        self.xi, self.yi, self.xf, self.yf, self.thetai, self.thetaf, self.l, self.k = struct.unpack(">dddddddd", buf.read(64))
        self.planning = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if init_state in parents: return 0
        tmphash = (0xc66a7858834d01fe) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if init_state._packed_fingerprint is None:
            init_state._packed_fingerprint = struct.pack(">Q", init_state._get_hash_recursive([]))
        return init_state._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

