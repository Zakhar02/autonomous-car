// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by lcm-gen

package lcmtest

import (
	"encoding/binary"
	"fmt"
	"math"
	"math/bits"
)

const _ = math.Pi
const _ = bits.UintSize

const node_t_Fingerprint uint64 = 0x98ff4a363aeb7273

// This is an example of a recursive type.  You can use this to implement data
// structures such as linked lists and trees.
type LcmtestNodeT struct {
	numChildren int32          `num_children`
	// Recursive types are allowed in variable-length arrays.
	Children    []LcmtestNodeT `children`
}

// Copy creates a deep copy
// TODO: fix the fugly x and p names...
func (x *LcmtestNodeT) Copy() (p LcmtestNodeT) {
	p.numChildren = x.numChildren

	p.Children = make([]LcmtestNodeT, p.numChildren)
	for i0 := int32(0); i0 < p.numChildren; i0++ {
		p.Children[i0] = x.Children[i0].Copy()
	}

	return
}

// Encode encodes a message (fingerprint & data) into binary form
//
// returns Encoded data or error
func (p *LcmtestNodeT) Encode() (data []byte, err error) {
	var size int
	if size, err = p.Size(); err != nil {
		return
	}

	data = make([]byte, 8+size)
	binary.BigEndian.PutUint64(data, LcmtestNodeT_Fingerprint())

	var d []byte
	if d, err = p.MarshalBinary(); err != nil {
		return
	}

	if copied := copy(data[8:], d); copied != size {
		return []byte{},
			fmt.Errorf("Encoding error, buffer not filled (%v != %v)", copied, size)
	}
	return
}

// MarshalBinary implements the BinaryMarshaller interface
func (p *LcmtestNodeT) MarshalBinary() (data []byte, err error) {
	var size int
	if size, err = p.Size(); err != nil {
		return
	}

	data = make([]byte, size)
	offset := 0

	// LCM struct name: num_children
	binary.BigEndian.PutUint32(data[offset:],
		uint32(p.numChildren))
	offset += 4

	// LCM struct name: children
	for i0 := int32(0); i0 < p.numChildren; i0++ {
		var tmp []byte
		if tmp, err = p.Children[i0].MarshalBinary(); err != nil {
			return
		}
		offset += copy(data[offset:], tmp)
	}

	return
}

// Decode decodes a message (fingerprint & data) from binary form
// and verifies that the fingerprint match the expected
//
// param data The buffer containing the encoded message
// returns Error
func (p *LcmtestNodeT) Decode(data []byte) (err error) {
	length := len(data)
	if length < 8 {
		return fmt.Errorf("Missing fingerprint in buffer")
	}

	if fp := binary.BigEndian.Uint64(data[:8]); fp != LcmtestNodeT_Fingerprint() {
		return fmt.Errorf("Fingerprints does not match (got %x expected %x)",
			fp, LcmtestNodeT_Fingerprint())
	}

	if err = p.UnmarshalBinary(data[8:]); err != nil {
		return
	}

	length -= 8
	var size int
	if size, err = p.Size(); err != nil {
		return
	}
	if length != size {
		return fmt.Errorf("Missing data in buffer (size missmatch, got %v expected %v)",
			length, size)
	}

	return
}

// UnmarshalBinary implements the BinaryUnmarshaler interface
func (p *LcmtestNodeT) UnmarshalBinary(data []byte) (err error) {
	offset := 0

	p.numChildren = int32(binary.BigEndian.Uint32(data[offset:]))
	offset += 4

	p.Children = make([]LcmtestNodeT, p.numChildren)
	for i0 := int32(0); i0 < p.numChildren; i0++ {
		if err = p.Children[i0].UnmarshalBinary(data[offset:]); err != nil {
			return
		}
		var size int
		if size, err = p.Children[i0].Size(); err != nil {
			return
		}
		offset += size
	}

	return
}

// NumChildren() returns the value of dynamic array size attribute
// LcmtestNodeT.num_children.
// And validates that the size is correct for all fields in which it is used.
func (p *LcmtestNodeT) NumChildren() (int32, error) {
	// Set value to first dynamic array using this size
	// Children
	p.numChildren = int32(len(p.Children))

	// Return size
	return p.numChildren, nil
}

// Fingerprint generates the LCM fingerprint value for this message
func LcmtestNodeT_Fingerprint(path ...uint64) uint64 {
	for _, v := range path {
		if v == node_t_Fingerprint {
			return 0
		}
	}

	path = append(path, node_t_Fingerprint)
	return bits.RotateLeft64(node_t_Fingerprint+
		LcmtestNodeT_Fingerprint(path...), 1)
}

// Size returns the size of this message in bytes
func (p *LcmtestNodeT) Size() (size int, err error) {

	// Validate and populate p.numChildren
	if _, err = p.NumChildren(); err != nil {
		return
	}
	size += 4 // p.numChildren

	for i0 := int32(0); i0 < p.numChildren; i0++ {
		var tmp int
		if tmp, err = p.Children[i0].Size(); err != nil {
			return
		}
		size += tmp
	}

	return
}
