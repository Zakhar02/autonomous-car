// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by lcm-gen

package lcmtest

import (
	"encoding/binary"
	"fmt"
	"math"
	"math/bits"
)

const _ = math.Pi
const _ = bits.UintSize

const exampleconst_t_Fingerprint uint64 = 0x0000000012345678

// LCM constants
const (
	// Declare a constant field with syntax "const <type> <name> = <value>;"
	LcmtestExampleconstT_ABC  int32   = 1
	LcmtestExampleconstT_DEF  int32   = 2
	LcmtestExampleconstT_PI   float64 = 3.1415926
	LcmtestExampleconstT_E    float64 = 2.8718
	LcmtestExampleconstT_LONG int64   = 0xf0f0f0f0
)

// Struct with various constant definitions
// Constant values can be defined for numeric types (int8_t, int16_t,
// int32_t, int64_t, float, double).
// Constant values for string types and booleans are not supported.
// 
type LcmtestExampleconstT struct {
}

// Copy creates a deep copy
// TODO: fix the fugly x and p names...
func (x *LcmtestExampleconstT) Copy() (p LcmtestExampleconstT) {
	return
}

// Encode encodes a message (fingerprint & data) into binary form
//
// returns Encoded data or error
func (p *LcmtestExampleconstT) Encode() (data []byte, err error) {
	var size int
	if size, err = p.Size(); err != nil {
		return
	}

	data = make([]byte, 8+size)
	binary.BigEndian.PutUint64(data, LcmtestExampleconstT_Fingerprint())

	var d []byte
	if d, err = p.MarshalBinary(); err != nil {
		return
	}

	if copied := copy(data[8:], d); copied != size {
		return []byte{},
			fmt.Errorf("Encoding error, buffer not filled (%v != %v)", copied, size)
	}
	return
}

// MarshalBinary implements the BinaryMarshaller interface
func (p *LcmtestExampleconstT) MarshalBinary() (data []byte, err error) {
	return
}

// Decode decodes a message (fingerprint & data) from binary form
// and verifies that the fingerprint match the expected
//
// param data The buffer containing the encoded message
// returns Error
func (p *LcmtestExampleconstT) Decode(data []byte) (err error) {
	length := len(data)
	if length < 8 {
		return fmt.Errorf("Missing fingerprint in buffer")
	}

	if fp := binary.BigEndian.Uint64(data[:8]); fp != LcmtestExampleconstT_Fingerprint() {
		return fmt.Errorf("Fingerprints does not match (got %x expected %x)",
			fp, LcmtestExampleconstT_Fingerprint())
	}

	if err = p.UnmarshalBinary(data[8:]); err != nil {
		return
	}

	length -= 8
	var size int
	if size, err = p.Size(); err != nil {
		return
	}
	if length != size {
		return fmt.Errorf("Missing data in buffer (size missmatch, got %v expected %v)",
			length, size)
	}

	return
}

// UnmarshalBinary implements the BinaryUnmarshaler interface
func (p *LcmtestExampleconstT) UnmarshalBinary(data []byte) (err error) {
	return
}

// Fingerprint generates the LCM fingerprint value for this message
func LcmtestExampleconstT_Fingerprint(path ...uint64) uint64 {
	for _, v := range path {
		if v == exampleconst_t_Fingerprint {
			return 0
		}
	}

	path = append(path, exampleconst_t_Fingerprint)
	return bits.RotateLeft64(exampleconst_t_Fingerprint, 1)
}

// Size returns the size of this message in bytes
func (p *LcmtestExampleconstT) Size() (size int, err error) {

	return
}
